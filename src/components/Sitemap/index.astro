---
import {
  sitemapSectionsJa as ja,
  sitemapSectionsEn as en,
  type SitemapSection,
} from "../../data/sitemapSections";
import { basename } from "path";
import type { AstroInstance, MDXInstance, MarkdownInstance } from "astro";
import Layout, { Frontmatter } from "@layouts/Layout.astro";

interface Props {
  lang: "ja" | "en";
}

interface AstroInstanceExt extends AstroInstance {
  title: string;
  sitemap?: boolean;
}

type PageInstance =
  | MarkdownInstance<Frontmatter>
  | MDXInstance<Frontmatter>
  | AstroInstanceExt;

interface Page {
  title: string;
  url: string;
}

interface SitemapSectionWithLinks extends SitemapSection {
  links: Page[];
}

const { lang } = Astro.props;

let pages = (await Astro.glob<PageInstance>("/src/pages/**/*.{astro,md,mdx}")).filter(page => {
  if (!page.url) {
    return false;
  }
  if (basename(page.url).startsWith("_")) {
    return false;
  }
  if ("frontmatter" in page && page.frontmatter.redirect_to) {
    return false;
  }
  const { sitemap } = "frontmatter" in page ? page.frontmatter : page;
  if (sitemap === false) {
    return false;
  }
  const isEnglishPage = page.url.startsWith("/en/");
  return {
    ja: !isEnglishPage,
    en: isEnglishPage,
  }[lang];
}).map<Page>(page => {
  const { title } = "frontmatter" in page ? page.frontmatter : page;
  return { title, url: page.url! };
});

// https://stackoverflow.com/questions/979256/sorting-an-array-of-objects-by-property-values#comment48111034_979289
// @ts-ignore
pages.sort((a, b) => (a.url > b.url) - (a.url < b.url));

const sectionsWithLinks = { ja, en }[lang].map<SitemapSectionWithLinks>(
  section => {
    let links: Page[] = [];
    section.patterns?.forEach(pattern => {
      pages = pages.filter(page => {
        let cond = false;
        cond ||= pattern.test(page.url);
        if (section.negativePatterns) {
          cond &&= !section.negativePatterns.some(pattern => pattern.test(page.url));
        }
        if (cond) {
          links.push(page)
        }
        return !cond
      })
    });
    return {...section, links};
  }
);
---
<Layout
  frontmatter={{
    title: {
      ja: "サイトマップ",
      en: "Sitemap",
    }[lang],
    lang,
  }}
  headings={[
    
  ]}
>
  {
    sectionsWithLinks.map((section) => {
      const Heading = `h${ section.depth }`;
      return (
        <>
          <Heading>{section.name}</Heading>
          <ul>
            {section.links.map((link) => {
              return (
                <li>
                  <a href={link.url}>{link.title}</a>
                </li>
              );
            })}
          </ul>
        </>
      );
    })
  }
</Layout>
