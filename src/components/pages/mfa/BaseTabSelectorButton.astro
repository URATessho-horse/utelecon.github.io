---
import type { Labels, Selection, Step } from "./tabs";

interface Props {
  step: Step;
  labels: Labels;
  guide: string;
}

const { step, labels, guide } = Astro.props;

function buttonProps(selection: Selection) {
  return {
    id: `button-${step}-${selection}`,
    "aria-labelledby": `label-${step}-${selection}`,
    value: selection,
  } satisfies astroHTML.JSX.ButtonHTMLAttributes;
}

function labelProps(selection: Selection) {
  return {
    id: `label-${step}-${selection}`,
    for: `button-${step}-${selection}`,
  } satisfies astroHTML.JSX.LabelHTMLAttributes;
}
---

<div class="wrapper">
  <p><span class="material-icon">arrow_forward_ios</span>{guide}</p>
  <button {...buttonProps("ms_auth")}>
    <div style="flex: auto;">
    <label {...labelProps("ms_auth")}>{labels.ms_auth}</label>
    <slot name="ms_auth" />
  </div>
  <div style="flex: none;">
    <div><span class="material-icon">arrow_forward_ios</span></div>
  </div>
  </button>

  <button {...buttonProps("auth_app")}>
    <div style="flex: auto;">
    <label {...labelProps("auth_app")}>{labels.auth_app}</label>
    <slot name="auth_app" />
  </div>
  <div style="flex: none;">

    <div><span class="material-icon">arrow_forward_ios</span></div>
  </div>
  </button>

  <button {...buttonProps("phone")}>
    <div style="flex: auto;">
    <label {...labelProps("phone")}>{labels.phone}</label>
    <slot name="phone" />
  </div>
  <div style="flex: none;">    <div><span class="material-icon">arrow_forward_ios</span></div>
  </div>
  </button>

  {
    labels.fido && (
      <button {...buttonProps("fido")}>
        <div style="flex: auto;">
          <label {...labelProps("fido")}>{labels.fido}</label>
          <slot name="ms_auth" />
        </div>
        <div style="flex: none; font-weight: bold;">
          
    <div><span class="material-icon">arrow_forward_ios</span></div>
        </div>
      </button>
    )
  }
</div>

<script>
  import { emitChangeTab } from "./tabs";

  function onClick(this: HTMLButtonElement) {
    const [, step, selection] = this.id.split("-");
    emitChangeTab(step, selection);
  }

  document.addEventListener("DOMContentLoaded", () => {
    document
      .querySelectorAll<HTMLButtonElement>(
        `button[id^="button"][aria-labelledby^="label"]`,
      )
      .forEach((button) => {
        button.addEventListener("click", onClick);
      });
  });
</script>

<style lang="scss">
  @import "@styles/color.scss";

  $main-color: $heading-color;
  $sub-color: white;
  
  .wrapper button {
    cursor: pointer;
    text-align: start;
    background: $sub-color;
    border-radius: 5px;
    border: 1px solid $main-color;
    margin: 0.25em 0;
    padding: 12px;
    border-bottom: solid 4px $main-color;
    position: relative;
    display: flex;
    align-items: center;
    gap: 0 0.5em;

    &:hover {
      opacity: 0.6;
    }
  }

  label {
    cursor: pointer;
    font-weight: bold;
    font-size: 1.2em;
    color: $main-color;
  }

  // label::after {
  //   content: "設定する >>";
  //   margin-right: 12px;
  //   position: absolute;
  //   right: 0;
  //   font-size: 0.8em;
  // }

  button :global(p) {
    font-size: 0.9em;
    margin: 0.5em 0 0;
    color: $black-gray;
  }

  .wrapper > p {
    // text-align: center;
    font-weight: bold;
    font-size: 0.9em;
    color: $red;
    margin: 0.5em 0;
    padding: 0.8em;
    border-radius: 4px;

    // background: $white-gray-light;

    border: solid 1px $red;
  }

  .material-icon {
          // display: block;
          // margin: 0 auto;
          padding-right: 0.4em;

          font-family: "Material Icons";
          // font-size: 1.5rem;
          text-transform: none;
          white-space: nowrap;
          text-rendering: optimizeLegibility;
          -webkit-font-smoothing: antialiased;
        }

  @font-face {
    font-family: "Material Icons";
    font-style: normal;
    font-weight: 400;
    src: url(https://fonts.gstatic.com/s/materialicons/v92/flUhRq6tzZclQEJ-Vdg-IuiaDsNcIhQ8tQ.woff2)
      format("woff2");
  }
  
</style>
