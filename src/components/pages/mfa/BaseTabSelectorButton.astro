---
import type { Labels, Selection, Step } from "./tabs";

interface Props {
  step: Step;
  labels: Labels;
  labelAfter: string;
  guide: string;
}

const { step, labels, labelAfter, guide } = Astro.props;

function buttonProps(selection: Selection) {
  return {
    id: `button-${step}-${selection}`,
    "aria-labelledby": `label-${step}-${selection}`,
    value: selection,
  } satisfies astroHTML.JSX.ButtonHTMLAttributes;
}

function labelProps(selection: Selection) {
  return {
    id: `label-${step}-${selection}`,
    for: `button-${step}-${selection}`,
  } satisfies astroHTML.JSX.LabelHTMLAttributes;
}
---

<div class="wrapper">
  <p>{guide}</p>
  <button {...buttonProps("ms_auth")}>
    <span>
      <span>
        <label {...labelProps("ms_auth")}>{labels.ms_auth}</label>
        <slot name="ms_auth" />
      </span>
    </span>
  </button>

  <button {...buttonProps("auth_app")}>
    <span>
      <span>
        <label {...labelProps("auth_app")}>{labels.auth_app}</label>
        <slot name="auth_app" />
      </span>
    </span>
  </button>

  <button {...buttonProps("phone")}>
    <span>
      <span>
        <label {...labelProps("phone")}>{labels.phone}</label>
        <slot name="phone" />
      </span>
    </span>
  </button>

  {
    labels.fido && (
      <button {...buttonProps("fido")}>
        <span>
          <span>
            <label {...labelProps("fido")}>{labels.fido}</label>
            <slot name="ms_auth" />
          </span>
        </span>
      </button>
    )
  }
</div>

<script>
  import { emitChangeTab } from "./tabs";

  function onClick(this: HTMLButtonElement) {
    const [, step, selection] = this.id.split("-");
    emitChangeTab(step, selection);
  }

  document.addEventListener("DOMContentLoaded", () => {
    document
      .querySelectorAll<HTMLButtonElement>(
        `button[id^="button"][aria-labelledby^="label"]`,
      )
      .forEach((button) => {
        button.addEventListener("click", onClick);
      });
  });
</script>

<style lang="scss" define:vars={{ "label-after": `"${labelAfter}"` }}>
  @import "@styles/color.scss";

  $main-color: $heading-color;
  $sub-color: white;

  .wrapper button {
    cursor: pointer;
    text-align: start;
    background: $sub-color;
    border-radius: 5px;
    border: 1px solid $main-color;
    margin-bottom: 0.5em;
    padding: 12px;
    border-bottom: solid 4px $main-color;
    position: relative;
  }

  button:hover {
    opacity: 0.6;
  }

  button > span {
    display: flex;
    align-items: center;
  }

  label {
    cursor: pointer;
    font-weight: bold;
    font-size: 1.2em;
    color: $main-color;
  }

  button > span::after {
    content: var(--label-after);
    display: block;
    writing-mode: vertical-rl;
    color: $main-color;
    font-weight: bold;
    font-size: 0.8em;
    margin: 0 0 0 0.5em;
    text-align: right;
  }

  button :global(p) {
    font-size: 0.9em;
    margin: 0.5em 0 0;
    color: $black-gray;
  }

  .wrapper > p {
    font-weight: bold;
    color: $red;
    margin: 0 0 1em;
    padding: 12px;
    border-radius: 5px;
    border: 2px double $red;
  }
</style>
