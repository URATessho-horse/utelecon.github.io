---
import type { Labels, Selection, Step } from "./tabs";

interface Props {
  step: Step;
  labels: Labels;
}

const { step, labels } = Astro.props;

function buttonProps(selection: Selection) {
  return {
    id: `button-${step}-${selection}`,
    "aria-labelledby": `label-${step}-${selection}`,
    value: selection,
  } satisfies astroHTML.JSX.ButtonHTMLAttributes;
}

function labelProps(selection: Selection) {
  return {
    id: `label-${step}-${selection}`,
    for: `button-${step}-${selection}`,
  } satisfies astroHTML.JSX.LabelHTMLAttributes;
}
---

<div class="wrapper">
  <button {...buttonProps("ms_auth")}>
    <label {...labelProps("ms_auth")}>{labels.ms_auth}</label>
    <slot name="ms_auth" />
  </button>

  <button {...buttonProps("auth_app")}>
    <label {...labelProps("auth_app")}>{labels.auth_app}</label>
    <slot name="auth_app" />
  </button>

  <button {...buttonProps("phone")}>
    <label {...labelProps("phone")}>{labels.phone}</label>
    <slot name="phone" />
  </button>

  {
    labels.fido && (
      <button {...buttonProps("fido")}>
        <label {...labelProps("fido")}>{labels.fido}</label>
        <slot name="ms_auth" />
      </button>
    )
  }
</div>

<script>
  import { emitChangeTab } from "./tabs";

  function onClick(this: HTMLButtonElement) {
    const [, step, selection] = this.id.split("-");
    emitChangeTab(step, selection);
  }

  document.addEventListener("DOMContentLoaded", () => {
    document
      .querySelectorAll<HTMLButtonElement>(
        `button[id^="button"][aria-labelledby^="label"]`,
      )
      .forEach((button) => {
        button.addEventListener("click", onClick);
      });
  });
</script>

<style lang="scss">
  @import "@styles/color.scss";

  $main-color: $heading-color;
  $sub-color: white;
  
  button {
    cursor: pointer;
    text-align: start;
    background: $sub-color;
    border-radius: 5px;
    border: 1px solid $main-color;
    margin-bottom: 0.5em;
    padding: 12px;
    border-bottom: solid 4px $main-color;
    position: relative;
  }

  button:hover {
    opacity: 0.6;
  }

  label {
    cursor: pointer;
    font-weight: bold;
    font-size: 1.2em;
    color: $main-color;
  }

  label::after {
    content: "設定する >>";
    margin-right: 12px;
    position: absolute;
    right: 0;
    font-size: 0.8em;
    animation: blink 2s ease infinite;
  }

  @keyframes blink {
    100% {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
  }

  button :global(p) {
    font-size: 0.9em;
    margin: 0.5em 0 0;
    color: $black-gray;
  }
</style>
