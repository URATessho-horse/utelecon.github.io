---
import { SEO, Props as SEOProps } from "astro-seo";
import { GoogleAnalytics } from "@astrolib/analytics";
import Header from "./Header/index.astro";
import Footer from "./Footer/index.astro";
import Toc from "./Toc.astro";
import "@styles/layout.scss";
import type { MDXLayoutProps, MarkdownHeading } from "astro";
import Author, { Author as AuthorProps } from "./Author.astro";
import Markdown from "@components/utils/Markdown.astro";
import type { Lang } from "@components/types";
import { parse as parsePath } from "path";

interface Props extends MDXLayoutProps<Frontmatter> {}

export interface Frontmatter {
  title: string;
  description?: string;
  lang: Lang;
  toc?: boolean;
  h1?: string;
  top?: boolean;
  support?: boolean;
  layout?: boolean;
  sitemap?: boolean;
  redirect_to?: string;
  author?: AuthorProps;
}

function createDefaultDescription(
  lang: Lang,
  headings: MarkdownHeading[]
): string {
  return (
    (
      {
        ja: "目次: ",
        en: "Table of Contents: ",
      }[lang] +
      headings
        .filter(({ depth }) => depth === 2)
        .map(({ text }) => text)
        .join("; ")
    ).slice(0, 97) + "..."
  );
}

const { frontmatter, headings, file } = Astro.props;
const {
  title,
  description = createDefaultDescription(frontmatter.lang, headings),
  lang,
  toc = true,
  h1,
  top,
  support,
  author,
} = frontmatter;

const htmlAttributes = {
  en: {
    lang: "en",
    class: "en",
  },
  ja: {
    lang: "ja",
  },
}[lang];

const locale = {
  en: "en_US",
  ja: "ja_JP",
}[lang];

const gaid = "UA-160716658-1";

const canonicalUrl = new URL(Astro.url);
if (parsePath(file).name !== "index") {
  canonicalUrl.pathname = canonicalUrl.pathname.replace(/\/$/, "");
}

const seoProps: SEOProps = {
  title,
  titleTemplate: "%s | utelecon",
  titleDefault: "utelecon",
  description,
  charset: "UTF-8",
  canonical: canonicalUrl.href,
};
if (title) {
  seoProps.openGraph = {
    basic: {
      title,
      type: "website",
      url: canonicalUrl.href,
      image: new URL("/assets/images/ogp.png", Astro.site).href,
    },
    optional: {
      description,
      locale,
      siteName: "utelecon",
    },
    image: {
      alt: "utelecon",
    },
  };
  seoProps.twitter = {
    title,
    description,
  };
}
---

<!DOCTYPE html>
<html {...htmlAttributes}>
  <head>
    <SEO {...seoProps} />

    <GoogleAnalytics id={gaid} partytown />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#157878" />
    <meta
      name="apple-mobile-web-app-status-bar-style"
      content="black-translucent"
    />

    <meta name="generator" content={Astro.generator} />

    <link rel="icon" href="/assets/images/favicon.png" />

    <script
      async
      src="https://cse.google.com/cse.js?cx=000989064976317806194:6h5uropjuyu"
    ></script>

    <script>
      const headings = document
        .querySelector("#column")
        ?.querySelectorAll("h2, h3, h4, h5, h6");

      const firstIndex = document.querySelector(".main__toc a");
      if (firstIndex !== null) {
        firstIndex.classList.add("active");
      }
      
      const options = {
        root: null,
        rootMargin: "0px 0px -100% 0px",
        threshold: 0,
      };
      
      function activateIndex(element: Element) {
        const currentActiveIndex = document.querySelector(".main__toc a.active");
        if (currentActiveIndex !== null) {
          currentActiveIndex.classList.remove("active");
        }
        const newActiveIndex = document.querySelector(
          `.main__toc a[href='#${element.id}']`,
        );
        if (newActiveIndex !== null) {
          newActiveIndex.classList.add("active");
          const rect = newActiveIndex.getBoundingClientRect();
          if (rect.top < 0 || rect.bottom > window.innerHeight) {
            newActiveIndex.scrollIntoView({
              behavior: "smooth",
              block: "center",
            });
          }
        }
      }
      
      function onHeadingsIntersect(entries: IntersectionObserverEntry[]) {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            activateIndex(entry.target);
          }
        });
      }
      
      const headingsObserver = new IntersectionObserver(onHeadingsIntersect, options);
      
      headings?.forEach((heading) => {
        headingsObserver.observe(heading);
      });
    </script>

  </head>
  <body>
    <Header lang={lang} top={top} canonicalUrl={canonicalUrl} />
    <main id="content">
      {
        !top && (
          <h1 class="title">
            <Markdown content={h1 ?? title} />
          </h1>
        )
      }
      <div id="content-body">
        <section id="column">
          <slot />
          {
            author && (
              <>
                <hr />
                <Author lang={lang} author={author} />
              </>
            )
          }
        </section>

        {
          !top && toc && headings.length > 0 && (
            <aside id="sidebar-container">
              <div id="sidebar">
                <div id="sidebar-sticky">
                <Toc headings={headings} lang={lang} />
                </div>
              <div/>
            </aside>
          )
        }
        </div>
    </main>
    <Footer lang={lang} support={support} />
    <style>
      .title {
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid $white-gray-dark;
        font-size: 2rem;
        font-weight: bold;
        color: black;
      }
      #content-body {
        display: flex;
        justify-content: space-between;
        gap: 2rem;
      }
      #sidebar-container {
        width: 18rem;
        min-width: 18rem;
      }
      #sidebar {
        height: 100%;
      }
      #sidebar-sticky {
        display: flex;
        flex-direction: column;
        position: sticky;
        top: 2rem;
        max-height: 100vh;
      }
      @media screen and (max-width: 768px) {
        #content-body {
          /* flex-direction: column-reverse; */
        }
        #column {
          width: 100%;
        }
        #sidebar-container {
          display: none;
        }
        #column {
          width: 100%;
        }
      }

    </style>
  </body>
</html>
