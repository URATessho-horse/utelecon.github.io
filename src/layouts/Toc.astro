---
import type { Lang } from "@components/types";
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
  lang: Lang;
}

interface Headings extends MarkdownHeading {
  children: Headings[];
}

function push(current: Headings, heading: MarkdownHeading) {
  if (heading.depth === current.depth + 1) {
    current.children.push({ ...heading, children: [] });
  } else if (heading.depth > current.depth + 1) {
    const last = current.children[current.children.length - 1];
    if (last) push(last, heading);
  }
}

const headings: Headings[] = [];
let current: Headings | undefined;

for (const heading of Astro.props.headings) {
  if (heading.depth === 2) {
    current = { ...heading, children: [] };
    headings.push(current);
  } else {
    if (current) push(current, heading);
  }
}
---

<aside id="sidebar">
  <div id="toc-toggle">
    <button id="toc-toggle-button">
      <span id="toc-toggle-button-icon">
        {Astro.props.lang === "ja" ? "目次" : "TOC"}
      </span>
    </button>
    <div id="toc-backdrop"></div>
  </div>
  <div id="toc-container">
    <section class="main__toc">
      <h2>{Astro.props.lang === "ja" ? "目次" : "Table of Contents"}</h2>
      <ul>
        {
          headings.map((h2) => (
            <li>
              <a href={`#${h2.slug}`}>{h2.text}</a>
              {h2.children.length > 0 && (
                <ul>
                  {h2.children.map((h3) => (
                    <li>
                      <a href={`#${h3.slug}`}>{h3.text}</a>
                      {h3.children.length > 0 && (
                        <ul>
                          {h3.children.map((h4) => (
                            <li>
                              <a href={`#${h4.slug}`}>{h4.text}</a>
                            </li>
                          ))}
                        </ul>
                      )}
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))
        }
      </ul>
    </section>
  </div>
</aside>

<style lang="scss">
  @import "@styles/color.scss";
  $toc-ul-left-padding: 36px;
  .main__toc {
    overflow-y: auto;
    padding: 1em 0;
    font-size: 0.875em;
    border-radius: 1em;
    background-color: $white-gray-light;
    width: 18rem;
    min-width: 18rem;
    display: flex;
    flex-direction: column;
    position: sticky;
    top: 2rem;
    max-height: calc(100vh - 12rem);

    & > h2 {
      margin: 0 0 0.4em 0.8em;
      padding: 0;
      border: none;
      font-size: 1.25em;
      font-weight: bold;
      color: $text-color;
      &:only-child {
        padding-bottom: 0.8em;
      }
    }
    ul {
      margin: 0;
      padding-left: 0;
    }
    li {
      display: contents;
    }
    li > a {
      display: block;
      position: relative;
      color: $link-color-light;
      padding: 0.25em 1em 0.25em 0;
      &:hover, &.active {
        color: $link-color;
      }
      &:before {
        position: absolute;
        content: "";
        border-radius: 50%;
        top: 1em;
        @media (pointer: coarse) {
          top: 1.5em;
        }
        left: - calc($toc-ul-left-padding / 2);
        width: 4px;
        height: 4px;
        transform: translate(-50%, -50%);
        background: lightskyblue;
        border: 2px solid $white-gray-light;
      }
      &.active {
        font-weight: bold;
        &:before {
          background: $link-color-light;
          border: 2px solid $white-gray-dark;
          width: 0.5em;
          height: 0.5em;
        }
      }
      @media (pointer: coarse) {
        padding: 0.75em 1em 0.75em 0;
      }
    }
    > ul {
      position: relative;
      padding-left: $toc-ul-left-padding;
      &:before {
        position: absolute;
        top: 20px;
        bottom: 20px;
        left: calc($toc-ul-left-padding / 2);
        width: 3px;
        content: "";
        transform: translateX(-50%);
        background: $white-gray-dark;
        border-radius: 0 0 5px 5px;
      }
      > li > a {
        &:before {
          width: 0.5em;
          height: 0.5em;
        }
      }
    }
  }
  #toc-toggle {
    display: none;
  }
  #toc-container {
    height: 100%;
  }
  @media screen and (max-width: 896px) {
    #sidebar {
      min-width: 0;
      position: sticky;
      top: 1rem;
    }
    #toc-toggle {
      display: flex;
      justify-content: flex-end;
    }
    #toc-toggle-button {
      cursor: pointer;
      appearance: none;
      border: none;
      background: #fff;
      padding: 1rem 1rem;
      border: 1px solid #ccc;
      border-radius: 0.375rem;
      box-shadow: rgba(0,0,0,0.2) 0 0.25rem 0.5rem 0;
      color: #212121;
    }
    #toc-toggle-button-icon {
      &:before {
        content: "";
        display: inline-block;
        width: 0.5rem;
        height: 0.5rem;
        margin-right: 0.5rem;
        border-right: 1.5px solid #212121;
        border-bottom: 1.5px solid #212121;
        transform: translateY(-0.25rem) rotate(45deg);
      }
      aside.toc-open & {
        &:before {
          transform: rotate(-135deg);
        }
      }
    }
    #toc-backdrop {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: transparent;
      aside.toc-open & {
        display: block;
      }
      z-index: 100;
    }
    #toc-container {
      position: relative;
      height: unset;
    }
    .main__toc {
      display: none;
      position: absolute;
      top: 1rem;
      right: 0px;
      box-shadow: rgba(0,0,0,0.2) 0 0.25rem 0.5rem 0;
      height: unset;
      border-radius: 1em;
    }
    .toc-open .main__toc {
      display: block;
      z-index: 100;
    }
  }
</style>

<script>
  // currently this script seems to be loaded on all page, even if it doesn't have toc.
  // To conditionally load it according to the value of `toc` in fromtmatter,
  // we may need to inject it as raw JS (with `is:inline` directive)

  const sidebar = document.getElementById("sidebar");

  document.getElementById("toc-toggle-button")?.addEventListener("click", () => {
    sidebar?.classList.toggle("toc-open");
  });

  document.getElementById("toc-backdrop")?.addEventListener("click", () => {
    sidebar?.classList.remove("toc-open");
  });

  function observeToc() {
    const toc = document.querySelector(".main__toc");

    if (toc === null) {
      return;
    }

    const headings = document
      .querySelector("#content-column")
      ?.querySelectorAll("h2, h3, h4, h5, h6");
  
     const indices = document.querySelectorAll(".main__toc a");
     if (indices[0] !== null) {
       indices[0].classList.add("active");
     }

     indices.forEach((index) => {
       index.addEventListener("click", () => {
         sidebar?.classList.remove("toc-open");
       });
     });

    function activateIndex(element: Element) {
      const currentActiveIndex = document.querySelector(".main__toc a.active");
      if (currentActiveIndex !== null) {
        currentActiveIndex.classList.remove("active");
      }
      const newActiveIndex = document.querySelector(
        `.main__toc a[href='#${element.id}']`,
      );
      if (newActiveIndex !== null) {
        newActiveIndex.classList.add("active");
        const rect = newActiveIndex.getBoundingClientRect();
        if (
        // scroll in toc, only if toc is fully visible
        toc?.getBoundingClientRect().top! > 0 &&
        (rect.top < toc?.getBoundingClientRect().top! || rect.bottom > toc?.getBoundingClientRect().bottom!)) {
          newActiveIndex.scrollIntoView({
            behavior: "auto",
            block: "center",
          });
        }
      }
    }
  
    function onHeadingsIntersect(entries: IntersectionObserverEntry[]) {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          activateIndex(entry.target);
        }
      });
    }
  
    const headingsObserverOptions = {
      root: null,
      rootMargin: "0px 0px -100% 0px",
      threshold: 0,
    };

    const headingsObserver = new IntersectionObserver(
      onHeadingsIntersect,
      headingsObserverOptions,
    );
  
    headings?.forEach((heading) => {
      headingsObserver.observe(heading);
    });
  }
  
  observeToc();
</script>
